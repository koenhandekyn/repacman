- content_for :title do
  | Productie #{@batch.batch_uid}

.mb style="display: inline-flex; width: fit-content; gap: 0.5rem; margin-left: auto; margin-top: -2rem;"
  = button_to @batch, class: "btn", title: "Print" do
    span.material-symbols-outlined print

  - if @batch.completed?
    = button_to @batch, method: :patch, class: "btn", params: { batch: { status: 'pending' } } do
      span.material-symbols-outlined.text-right check
  - else
    = button_to @batch, method: :patch, class: "btn btn-danger", params: { batch: { status: 'completed' } } do
      span.material-symbols-outlined.text-right close

  = button_to @batch, method: :delete, class: "btn btn-danger", title: "Verwijder", data: { turbo_confirm: "Weet je zeker dat je deze batch wilt verwijderen?" } do
    span.material-symbols-outlined delete

= render "form", batch: @batch

section
  .grid.align-items-end.mt.mb style="grid-template-columns: auto 20rem"
    div.h2 Outputs
    output-total-weight.text-right
      - if @batch.total_weight_diff_perc.abs > 0.001
        => format_weight_with_units(@batch.total_weight_inputs_base)
        span style="color: red"
          = format_weight_with_units_with_sign(@batch.total_weight_diff)
      |< = #{format_weight_with_units(@batch.total_weight_outputs_base)}

  div#batch_outputs
    - @batch.batch_outputs.each do |batch_output|
      = render "batch_output_form", batch_output:, batch: @batch, products: @products

  = render "batch_output_form", batch_output: @batch.batch_outputs.new, batch: @batch, products: @products

section
  h2 Ingredients
  - @batch.family.assemblies.order(:step).each do |assembly|
    = render Components::IngredientInputs.new(assembly:, batch: @batch)
