- content_for :title do
  | Productie #{@batch.batch_uid}

/ = render Components::BatchHeader.new(@batch)

= render "form", batch: @batch

section
  h2 Ingredients
  - @batch.family.assemblies.each do |assembly|
    = render Components::IngredientInputs.new(assembly:, batch: @batch)


outputs.grid.align-items-end.mt.mb style="grid-template-columns: auto auto"
  ruby:
    family = @batch.family
    products = Product.includes(:family).where(family:)
    total_weight_outputs = @batch.total_weight_outputs_base
    total_weight_inputs = @batch.total_weight_inputs_base
    total_weight_diff = total_weight_outputs - total_weight_inputs
    total_weight_diff_perc = total_weight_diff / total_weight_inputs
  div.h2 Outputs
  output-total-weight.text-right

    - if total_weight_diff_perc.abs > 0.001
      => format_weight_with_units(total_weight_inputs)
      span style="color: red"
        = format_weight_with_units_with_sign(total_weight_diff)
    |< = #{format_weight_with_units(total_weight_outputs)}

div#batch_outputs
  - @batch.batch_outputs.each do |batch_output|
    = render "batch_output_form", batch_output:, batch: @batch, products:
hr

= render "batch_output_form", batch_output: @batch.batch_outputs.new, batch: @batch, products:

.mt style="display: inline-flex; width: fit-content; gap: 0.5rem; margin-left: auto;"
  = button_to @batch, class: "btn", title: "Print" do
    span.material-symbols-outlined
      | print

  = button_to @batch, method: :delete, class: "btn btn-danger", title: "Verwijder", data: { turbo_confirm: "Weet je zeker dat je deze batch wilt verwijderen?" } do
    span.material-symbols-outlined
      | delete
